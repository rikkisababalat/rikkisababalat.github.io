// GABUNGAN DARI DUA SCRIPT ANDA + OPTIMASI

// --- SCRIPT UTAMA UNTUK KUIS & DIAGNOSIS ---
const caseData = {
    diagnoses: [
        { id: 'meningitis-tb', name: 'Meningitis TB', matchScore: 10, description: 'Infeksi selaput otak oleh Mycobacterium tuberculosis.', analysis: 'SANGAT TEPAT. Kombinasi gejala subakut (demam >2 minggu), tanda rangsang meningeal, dan profil CSF (pleositosis limfositik, protein tinggi, glukosa rendah) sangat klasik untuk Meningitis TB. Ini adalah diagnosis kerja utama.' },
        { id: 'meningitis-bakterial', name: 'Meningitis Bakterial', matchScore: 5, description: 'Infeksi bakteri akut pada selaput otak.', analysis: 'KURANG TEPAT. Walaupun ada tanda infeksi dan rangsang meningeal, meningitis bakterial tipikal biasanya memiliki onset yang sangat akut (< 48 jam) dan CSF didominasi oleh sel neutrofil, bukan limfosit.' },
        { id: 'meningitis-viral', name: 'Meningitis Viral', matchScore: 3, description: 'Infeksi virus pada selaput otak, umumnya lebih ringan.', analysis: 'TIDAK TEPAT. Meskipun CSF-nya didominasi limfosit, meningitis viral umumnya memiliki kadar glukosa CSF yang normal dan peningkatan protein yang tidak setinggi pada kasus ini. Penurunan kesadaran juga lebih jarang terjadi.' },
        { id: 'meningitis-jamur', name: 'Meningitis Jamur', matchScore: 6, description: 'Infeksi jamur (misal: Cryptococcus) pada selaput otak.', analysis: 'MUNGKIN. Gambaran klinis subakut dan profil CSF bisa sangat mirip dengan Meningitis TB. Ini adalah diagnosis banding yang penting, terutama jika pasien memiliki status imunokompromais. Diperlukan pemeriksaan spesifik seperti tinta India atau antigen kriptokokus untuk menyingkirkannya.' },
        { id: 'ensefalitis', name: 'Ensefalitis', matchScore: 4, description: 'Peradangan pada parenkim (jaringan) otak itu sendiri.', analysis: 'KURANG TEPAT. Ensefalitis juga menyebabkan penurunan kesadaran, namun biasanya disertai defisit neurologis fokal (seperti kelemahan separuh badan atau kejang) dan tanda rangsang meningeal (kaku kuduk) tidak selalu menonjol. Profil CSF lebih mengarah ke meningitis.' }
    ],
    quiz: [
        { question: "Berdasarkan keseluruhan data klinis, apakah diagnosis yang paling mungkin?", options: ["Meningitis TB", "Meningitis Bakterial Akut", "Meningitis Viral", "Stroke", "Ensefalitis"], answer: "Meningitis TB" },
        { question: "Temuan CSF berupa dominasi sel limfosit, protein tinggi, dan glukosa rendah secara kolektif dikenal sebagai...", options: ["Profil CSF Bakterial", "Profil CSF Viral", "Profil CSF Tuberkulosis/Jamur", "Profil CSF Normal", "Profil perdarahan subarachnoid"], answer: "Profil CSF Tuberkulosis/Jamur" },
        { question: "Apa arti dari temuan klinis 'kaku kuduk' positif pada pasien?", options: ["Tanda iritasi pada parenkim otak", "Tanda adanya peradangan pada selaput otak (meningen)", "Tanda peningkatan tekanan intrakranial", "Tanda kerusakan saraf tulang belakang", "Refleks patologis akibat stroke"], answer: "Tanda adanya peradangan pada selaput otak (meningen)" },
        { question: "Riwayat demam selama 3 minggu menunjukkan proses penyakit yang bersifat...", options: ["Akut", "Subakut atau Kronis", "Intermiten", "Hiperakut", "Transient"], answer: "Subakut atau Kronis" },
        { question: "Manakah temuan pada cairan serebrospinal (CSF) yang paling membedakan kasus ini dari meningitis viral tipikal?", options: ["Warna kekuningan", "Dominasi sel limfosit", "Kadar glukosa yang rendah", "Adanya sel darah merah", "Tekanan pembukaan yang tinggi"], answer: "Kadar glukosa yang rendah" },
        { question: "Mengapa diagnosis meningitis bakterial akut kurang mungkin pada kasus ini?", options: ["Karena pasien adalah laki-laki", "Karena usia pasien 30 tahun", "Karena onset gejala yang subakut (3 minggu) dan dominasi limfosit di CSF", "Karena tidak ada riwayat trauma kepala", "Karena tekanan darah normal"], answer: "Karena onset gejala yang subakut (3 minggu) dan dominasi limfosit di CSF" },
        { question: "Pemeriksaan penunjang lanjutan yang paling spesifik untuk mengkonfirmasi diagnosis Meningitis TB dari CSF adalah...", options: ["Kultur darah", "Pewarnaan Gram", "Tes GenXpert MTB/RIF", "CT Scan kepala dengan kontras", "Pemeriksaan Tinta India"], answer: "Tes GenXpert MTB/RIF" }
    ]
};
document.addEventListener('DOMContentLoaded', () => {
    function shuffleArray(array) { for (let i = array.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1));[array[i], array[j]] = [array[j], array[i]]; } }
    shuffleArray(caseData.diagnoses);
    const { diagnoses, quiz: quizData } = caseData;
    const navContainer = document.getElementById('diagnosis-nav');
    const detailsContainer = document.getElementById('diagnosis-details');
    const conclusionSection = document.getElementById('conclusion');
    let clickedDiagnoses = new Set();
    const startQuizBtn = document.getElementById('start-quiz-btn');
    function renderDetails(diagnosisId) { const diagnosis = diagnoses.find(d => d.id === diagnosisId); if (!diagnosis) return; const wasClickedBefore = clickedDiagnoses.has(diagnosisId); if (!wasClickedBefore) { clickedDiagnoses.add(diagnosisId); updateProgressUI(); } if (clickedDiagnoses.size === diagnoses.length) { setTimeout(() => conclusionSection.classList.remove('hidden'), 300); } const getScoreColor = (score) => { if (score >= 8) return '#10b981'; if (score >= 5) return '#f59e0b'; return '#ef4444'; }; detailsContainer.innerHTML = `<div class="bg-white p-6 rounded-xl shadow-lg border border-slate-200"><div class="text-center md:text-left"><h3 class="text-2xl font-bold text-emerald-800">${diagnosis.name}</h3><p class="text-slate-600 mt-1">${diagnosis.description}</p></div><div class="mt-4 pt-4 border-t border-slate-200"><h4 class="font-semibold text-slate-700">Analisis Relevansi dengan Kasus:</h4><p class="text-slate-600 mt-1 mb-4">${diagnosis.analysis}</p><div><h5 class="text-sm font-semibold text-slate-600 mb-1">Skor Relevansi: <span class="font-bold text-black">${diagnosis.matchScore} / 10</span></h5><div class="w-full bg-slate-200 rounded-full h-2.5"><div class="h-2.5 rounded-full" style="width: ${(diagnosis.matchScore / 10) * 100}%; background-color: ${getScoreColor(diagnosis.matchScore)};"></div></div></div></div></div>`; detailsContainer.style.height = 'auto'; const currentHeight = detailsContainer.scrollHeight; detailsContainer.style.height = '0'; setTimeout(() => { detailsContainer.style.height = currentHeight + 'px'; }, 10); document.querySelectorAll('#diagnosis-nav button').forEach(btn => { btn.classList.toggle('nav-button-active', btn.dataset.id === diagnosisId); btn.classList.toggle('nav-button-inactive', btn.dataset.id !== diagnosisId); }); }
    function createNav() { diagnoses.forEach(diagnosis => { const button = document.createElement('button'); button.textContent = diagnosis.name; button.dataset.id = diagnosis.id; button.className = 'px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 nav-button-inactive'; button.onclick = () => renderDetails(diagnosis.id); navContainer.appendChild(button); }); }
    function createProgressUI() {
        const progressSection = document.getElementById('progress-section');
        progressSection.innerHTML = `<div class="battery" id="summary-battery">${Array(diagnoses.length).fill('<div class="battery-segment"></div>').join('')}</div><div id="summary-percentage">0%</div><ul id="diagnosis-checklist">${diagnoses.map(d => `<li id="checklist-${d.id}">${d.name}</li>`).join('')}</ul>`;
    }
    function updateProgressUI() {
        const numCompleted = clickedDiagnoses.size;
        const total = diagnoses.length;
        const percentage = Math.round((numCompleted / total) * 100);
        document.getElementById('summary-percentage').textContent = `${percentage}%`;
        const segments = document.querySelectorAll('#summary-battery .battery-segment');
        segments.forEach((segment, index) => { if (index < numCompleted) { segment.classList.add('filled'); } else { segment.classList.remove('filled'); } });
        diagnoses.forEach(d => { const item = document.getElementById(`checklist-${d.id}`); if (clickedDiagnoses.has(d.id)) { item.classList.add('completed'); item.innerHTML = `✅ ${d.name}`; } });
        if (numCompleted === total) { startQuizBtn.disabled = false; startQuizBtn.classList.add('electric-effect'); }
    }
    let timePerQuestion = 30, currentQuestionIndex = 0, score = 0, attempt = 0, questionOrder = [], interval;
    const quizHomeBox = document.getElementById('quiz-home-box');
    const quizBox = document.getElementById('quiz-box');
    const quizOverBox = document.getElementById('quiz-over-box');
    const timeSelectionBox = document.getElementById('time-selection-box');
    const questionCounter = document.getElementById('question-counter');
    const scoreBoardElement = document.getElementById('correct-answers');
    const remainingTimeElement = document.getElementById('remaining-time');
    const questionTextElement = document.getElementById('question-text');
    const optionsContainer = document.getElementById('options-container');
    const timeUpText = document.getElementById('time-up-text');
    const nextQuestionBtn = document.getElementById('next-question-btn');
    const seeResultBtn = document.getElementById('see-result-btn');
    const startAgainBtn = document.getElementById('start-again-btn');
    const timeKilatBtn = document.getElementById('time-kilat-btn');
    const timeNormalBtn = document.getElementById('time-normal-btn');
    const timeSantaiBtn = document.getElementById('time-santai-btn');
    function getAppreciationInfo(score, totalQuestions) { const percentage = totalQuestions > 0 ? (score / totalQuestions) * 100 : 0; if (percentage >= 95) { return { level: "Master! 🏆", description: "Pemahaman Anda sangat mendalam dan komprehensif. Luar biasa!", colorClass: "text-emerald-600" }; } else if (percentage >= 80) { return { level: "Ahli 🧠", description: "Anda punya pemahaman yang kuat tentang konsep-konsep kunci. Kerja bagus!", colorClass: "text-green-600" }; } else if (percentage >= 60) { return { level: "Cukup Baik 👍", description: "Dasar-dasarnya sudah Anda kuasai. Teruslah berlatih untuk menjadi lebih ahli.", colorClass: "text-yellow-600" }; } else if (percentage >= 40) { return { level: "Perlu Peningkatan 📚", description: "Anda di jalur yang benar, namun beberapa konsep penting perlu ditinjau kembali.", colorClass: "text-orange-500" }; } else { return { level: "Mari Belajar Lagi 💪", description: "Jangan khawatir! Ulas kembali materi kasus untuk memperkuat pemahaman dasar Anda.", colorClass: "text-red-500" }; } }
    function resetQuizState() { currentQuestionIndex = 0; score = 0; attempt = 0; questionOrder = [...Array(quizData.length).keys()].sort(() => Math.random() - 0.5); }
    function startQuiz(time) { timePerQuestion = time; quizHomeBox.classList.add('hidden'); quizBox.classList.remove('hidden'); resetQuizState(); loadQuestion(); }
    function loadQuestion() { const questionIndex = questionOrder[currentQuestionIndex]; const currentQuestion = quizData[questionIndex]; questionTextElement.textContent = currentQuestion.question; questionCounter.textContent = `Pertanyaan ${currentQuestionIndex + 1} dari ${quizData.length}`; optionsContainer.innerHTML = ''; currentQuestion.options.sort(() => Math.random() - 0.5).forEach(optionText => { const button = document.createElement('button'); button.textContent = optionText; button.className = 'option-btn w-full text-left p-4 border-2 border-slate-200 rounded-lg text-slate-700 font-medium'; button.onclick = () => checkAnswer(button, optionText, currentQuestion.answer); optionsContainer.appendChild(button); }); startTimer(); }
    function checkAnswer(selectedButton, selectedText, correctAnswerText) { stopTimer(); attempt++; disableOptions(); if (selectedText === correctAnswerText) { selectedButton.classList.add('correct'); score++; scoreBoardElement.textContent = score; } else { selectedButton.classList.add('incorrect'); Array.from(optionsContainer.children).forEach(btn => { if (btn.textContent === correctAnswerText) btn.classList.add('correct'); }); } if (currentQuestionIndex < quizData.length - 1) { nextQuestionBtn.classList.remove('hidden'); } else { seeResultBtn.classList.remove('hidden'); } }
    function startTimer() { let timeLimit = timePerQuestion; remainingTimeElement.textContent = timeLimit; remainingTimeElement.classList.remove('less-time'); timeUpText.classList.add('hidden'); interval = setInterval(() => { timeLimit--; if (timeLimit < 10) remainingTimeElement.classList.add('less-time'); remainingTimeElement.textContent = timeLimit; if (timeLimit <= 0) timeIsUp(); }, 1000); }
    function timeIsUp() { stopTimer(); timeUpText.classList.remove('hidden'); disableOptions(); const correctAnswerText = quizData[questionOrder[currentQuestionIndex]].answer; Array.from(optionsContainer.children).forEach(btn => { if (btn.textContent === correctAnswerText) btn.classList.add('correct'); }); if (currentQuestionIndex < quizData.length - 1) { nextQuestionBtn.classList.remove('hidden'); } else { seeResultBtn.classList.remove('hidden'); } }
    function stopTimer() { clearInterval(interval); }
    function disableOptions() { Array.from(optionsContainer.children).forEach(button => { button.disabled = true; }); }
    function showNextQuestion() { currentQuestionIndex++; nextQuestionBtn.classList.add('hidden'); loadQuestion(); }
    function showResults() { quizBox.classList.add('hidden'); quizOverBox.classList.remove('hidden'); const totalQuestions = quizData.length; const totalCorrect = score; const totalWrong = totalQuestions - totalCorrect; document.getElementById('total-questions').textContent = totalQuestions; document.getElementById('total-correct').textContent = totalCorrect; document.getElementById('total-wrong').textContent = totalWrong; const percentage = totalQuestions > 0 ? ((totalCorrect / totalQuestions) * 100).toFixed(0) : 0; document.getElementById('percentage').textContent = `${percentage}%`; const appreciationInfo = getAppreciationInfo(totalCorrect, totalQuestions); const levelElement = document.getElementById('appreciation-level'); const descriptionElement = document.getElementById('appreciation-description'); levelElement.textContent = appreciationInfo.level; levelElement.className = 'text-2xl font-bold text-center'; appreciationInfo.colorClass.split(' ').forEach(cls => levelElement.classList.add(cls)); descriptionElement.textContent = appreciationInfo.description; }
    startQuizBtn.addEventListener('click', () => { startQuizBtn.classList.add('hidden'); timeSelectionBox.classList.remove('hidden'); });
    timeKilatBtn.addEventListener('click', () => startQuiz(10));
    timeNormalBtn.addEventListener('click', () => startQuiz(30));
    timeSantaiBtn.addEventListener('click', () => startQuiz(60));
    nextQuestionBtn.addEventListener('click', showNextQuestion);
    seeResultBtn.addEventListener('click', showResults);
    startAgainBtn.addEventListener('click', () => { quizOverBox.classList.add('hidden'); quizHomeBox.classList.remove('hidden'); timeSelectionBox.classList.add('hidden'); startQuizBtn.classList.remove('hidden'); seeResultBtn.classList.add('hidden'); nextQuestionBtn.classList.add('hidden'); scoreBoardElement.textContent = 0; });
    
    // Inisialisasi awal
    createNav();
    createProgressUI();
    startQuizBtn.disabled = true;
});

// --- SCRIPT UNTUK YOUTUBE AUDIO PLAYER + LAZY LOAD ---
const ytPlayer = document.getElementById('ytPlayer');
const YOUTUBE_VIDEO_ID = 'isi_dengan_ID_video_youtube_anda'; // GANTI DENGAN ID VIDEO ANDA
let isPlayerReady = false;

function sendCommand(command) {
    if (!ytPlayer || !ytPlayer.contentWindow) return;
    ytPlayer.contentWindow.postMessage(JSON.stringify({
        event: "command",
        func: command,
        args: []
    }), "*");
}

function playAudio() {
    if (!isPlayerReady) {
        // Muat iframe hanya saat play pertama kali ditekan
        ytPlayer.src = `https://www.youtube.com/embed/${YOUTUBE_VIDEO_ID}?enablejsapi=1&autoplay=1`;
        isPlayerReady = true;
    } else {
        sendCommand("playVideo");
    }
    document.getElementById('playBtn').classList.add('hidden');
    document.getElementById('pauseBtn').classList.remove('hidden');
    document.getElementById('status').textContent = "🎶 Sedang diputar";
}

function pauseAudio() {
    sendCommand("pauseVideo");
    document.getElementById('pauseBtn').classList.add('hidden');
    document.getElementById('playBtn').classList.remove('hidden');
    document.getElementById('status').textContent = "⏸️ Audio dijeda";
}